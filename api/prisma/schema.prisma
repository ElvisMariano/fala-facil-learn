generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// Usuário
model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  passwordHash  String
  role          UserRole  @default(STUDENT)
  level         Int       @default(1)
  xp            Int       @default(0)
  streak        Int       @default(0)
  timezone      String    @default("UTC")
  lastActivityAt DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relações
  progress      Progress[]
  achievements  UserAchievement[]
  forumPosts    ForumPost[]
  forumReplies  ForumReply[]

  @@map("users")
}

// Lição
model Lesson {
  id          String    @id @default(uuid())
  title       String
  description String
  category    String
  level       String
  content     Json
  status      String    @default("draft")
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relações
  progress    Progress[]

  @@map("lessons")
}

// Progresso do usuário
model Progress {
  id          String    @id @default(uuid())
  userId      String
  lessonId    String
  status      Status    @default(NOT_STARTED)
  startedAt   DateTime?
  completedAt DateTime?
  timeSpent   Int       @default(0) // em segundos
  attempts    Int       @default(0)
  errors      Int       @default(0)
  xpEarned    Int       @default(0)
  nextReview  DateTime?
  reviewCount Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  user        User      @relation(fields: [userId], references: [id])
  lesson      Lesson    @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId, status])
  @@index([lessonId, status])
  @@index([userId, nextReview])
  @@map("progress")
}

// Conquista
model Achievement {
  id          String    @id @default(uuid())
  title       String
  description String
  criteria    Json
  points      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  users       UserAchievement[]

  @@map("achievements")
}

// Relação Usuário-Conquista
model UserAchievement {
  id            String    @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime  @default(now())

  // Relações
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@map("user_achievements")
}

// Post do Fórum
model ForumPost {
  id          String    @id @default(uuid())
  userId      String
  title       String
  content     String
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relações
  user        User        @relation(fields: [userId], references: [id])
  replies     ForumReply[]

  @@map("forum_posts")
}

// Resposta do Fórum
model ForumReply {
  id          String    @id @default(uuid())
  postId      String
  userId      String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relações
  post        ForumPost  @relation(fields: [postId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@map("forum_replies")
}

enum UserRole {
  ADMIN
  STUDENT
  MODERATOR
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
} 