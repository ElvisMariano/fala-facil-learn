// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile      Profile?
  achievements Achievement[]

  @@map("users")
}

model Profile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  xp           Int      @default(0)
  level        Int      @default(1)
  streakDays   Int      @default(0)
  lastActivity DateTime @default(now())
  learningGoal String   @default("10")
  language     String   @default("pt-BR")
  notifications Json    @default("{\"email\":true,\"push\":true,\"streak\":true,\"updates\":false}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  level       String
  category    String
  content     String
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  progress    LessonProgress[]

  @@map("lessons")
}

model LessonProgress {
  id          Int       @id @default(autoincrement())
  userId      Int
  lessonId    Int
  status      String    @default("not_started") // not_started, in_progress, completed
  score       Int?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model FlashcardDeck {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cards     Flashcard[]
  progress  FlashcardProgress[]

  @@map("flashcard_decks")
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  front     String
  back      String
  example   String?
  deckId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck      FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@map("flashcards")
}

model FlashcardProgress {
  id          Int       @id @default(autoincrement())
  userId      Int
  deckId      Int
  status      String    @default("not_started") // not_started, in_progress, completed
  score       Int?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@unique([userId, deckId])
}

model Achievement {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String
  category    String
  xp          Int
  progress    Int       @default(0)
  target      Int
  earned      Boolean   @default(false)
  earnedAt    DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model UserAchievement {
  id            Int      @id @default(autoincrement())
  userId        Int
  achievementId Int
  earnedAt      DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
} 