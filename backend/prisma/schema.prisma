// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("user")
  lastStudyDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile      Profile?
  progress     FlashcardProgress[]

  @@map("users")
}

model Profile {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  xp           Int      @default(0)
  level        Int      @default(1)
  streakDays   Int      @default(0)
  lastActivity DateTime @default(now())
  learningGoal String   @default("10")
  language     String   @default("pt-BR")
  notifications Json    @default("{\"email\":true,\"push\":true,\"streak\":true,\"updates\":false}")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model FlashcardDeck {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  level       String   // beginner, intermediate, advanced
  category    String?  // vocabulary, grammar, phrases, idioms
  difficulty  String   @default("medium") // easy, medium, hard
  locked      Boolean  @default(false)
  isFavorite  Boolean  @default(false)
  nextReviewDate DateTime?
  lastStudyDate  DateTime?
  achievements String[] @default([])
  tags        String[] @default([])
  estimatedTimeMinutes Int @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cards     Flashcard[]
  progress  FlashcardProgress[]

  @@map("flashcard_decks")
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  front     String
  back      String
  example   String?
  deckId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck      FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  progress  FlashcardProgress[]

  @@map("flashcards")
}

model FlashcardProgress {
  id            Int       @id @default(autoincrement())
  userId        Int
  deckId        Int
  cardId        Int
  difficulty    String    @default("medium")
  lastStudiedAt DateTime  @default(now())
  studyCount    Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck          FlashcardDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card          Flashcard     @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@unique([userId, deckId, cardId])
  @@map("flashcard_progress")
} 